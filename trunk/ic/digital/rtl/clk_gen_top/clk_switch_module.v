
//****************************************************************************************************  
//*----------------Copyright (c) 2016 C-L-G.FPGA1988.Roger Wang. All rights reserved------------------
//
//                   --              It to be define                --
//                   --                    ...                      --
//                   --                    ...                      --
//                   --                    ...                      --
//**************************************************************************************************** 
//File Information
//**************************************************************************************************** 
//File Name      : clk_gen_module.v 
//Project Name   : gt0000
//Description    : The system auxiliary module.
//Github Address : https://github.com/C-L-G/gt0000/trunk/ic/digital/rtl/clk_gen_module/clk_gen_module.v
//License        : CPL
//**************************************************************************************************** 
//Version Information
//**************************************************************************************************** 
//Create Date    : 29-08-2016 17:00(1th Fri,July,2016)
//First Author   : Roger Wang
//Modify Date    : 29-08-2016 14:20(1th Sun,July,2016)
//Last Author    : Roger Wang
//Version Number : 001  
//Last Commit    : 29-08-2016 14:30(1th Sun,July,2016)
//**************************************************************************************************** 
//Change History(latest change first)
//dd.mm.yyyy - Author - Your log of change
//**************************************************************************************************** 
//02.09.2016 - Roger Wang - The initial version.
//*---------------------------------------------------------------------------------------------------
`timescale 1ns/1ps
module clk_switch_module(
    clk_0               ,//01   In
    clk_1               ,//01   In
	sel                 ,//01   In
    clk_o                //01   Out
);

    //************************************************************************************************
    // 1.Parameter and constant define
    //************************************************************************************************
    
    
    //************************************************************************************************
    // 2.input and output declaration
    //************************************************************************************************
    input               clk_0           ;//clk_0
    input               clk_1           ;//clk_1
    input               sel             ;//the clock select : 0 select clk_0,1 select the clk_1
    output              clk_o           ;//the selected clock
    
    //************************************************************************************************
    // 3.Register and wire declaration
    //************************************************************************************************
    
    //------------------------------------------------------------------------------------------------
    // 3.1 the system led module wire
    //------------------------------------------------------------------------------------------------    
    wire                clk_0_sel1      ;//
    wire                clk_0_sel2      ;//
    reg                 clk_0_reg1      ;//
    reg                 clk_0_reg2      ;//

    wire                clk_1_sel1      ;//
    wire                clk_1_sel2      ;//
    reg                 clk_1_reg1      ;//
    reg                 clk_1_reg2      ;//
    //************************************************************************************************
    // 4.Main code
    //************************************************************************************************
    //------------------------------------------------------------------------------------------------
    // 4.1 the clock switch : level 1
    //------------------------------------------------------------------------------------------------
    assign  clk_0_sel1  = (~sel) & (~clk_1_reg2);  
    assign  clk_1_sel1  = sel & (~clk_0_reg2);  
    
    always @(posedge clk_0) begin : CLK_0_REG1
        clk_0_reg1  <= clk_0_sel1;
    end
    always @(posedge clk_1) begin : CLK_1_REG1
        clk_1_reg1  <= clk_1_sel1;
    end
    //------------------------------------------------------------------------------------------------
    // 4.2 the clock switch : level 2
    //------------------------------------------------------------------------------------------------
    
    always @(negedge clk_0) begin : CLK_0_REG2
        clk_0_reg2  <= clk_0_reg1;
    end
    always @(negedge clk_1) begin : CLK_1_REG2
        clk_1_reg2  <= clk_1_reg1;
    end
    assign  clk_0_sel2  = clk_0 & clk_0_reg2;  
    assign  clk_1_sel2  = clk_1 & clk_1_reg2;  

    //------------------------------------------------------------------------------------------------
    // 4.3 the clock switch : level 3
    //------------------------------------------------------------------------------------------------
    assign  clk_o   = clk_0_sel2 | clk_1_sel2;
    
    //************************************************************************************************
    // 5.Sub module instantiation
    //************************************************************************************************
    //------------------------------------------------------------------------------------------------
    // 5.1 the xxx module
    //------------------------------------------------------------------------------------------------    

    
    //------------------------------------------------------------------------------------------------
    // 5.2 the xxx module
    //------------------------------------------------------------------------------------------------   

    
    //------------------------------------------------------------------------------------------------
    // 5.3 the xxx module
    //------------------------------------------------------------------------------------------------

    
endmodule    
//****************************************************************************************************
//End of Mopdule
//****************************************************************************************************
